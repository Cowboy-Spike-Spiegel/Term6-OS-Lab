# -*- coding: utf-8 -*-
import json
import sys
import threading

from PyQt5 import QtCore, QtWidgets
from PyQt5.QtCore import pyqtSignal, QObject
from PyQt5.QtWidgets import QApplication, QTextEdit, QMainWindow
from matplotlib import pyplot as plt

import Process_Init
from kernel import kernel
from widget import Ui_Widget

# Form implementation generated from reading ui file 'main_design.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

Event = threading.Event()


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1100, 900)
        MainWindow.setMinimumSize(QtCore.QSize(1100, 900))
        MainWindow.setMaximumSize(QtCore.QSize(1100, 900))
        MainWindow.setStyleSheet("QMainWindow#MainWindow\n"
                                 "{\n"
                                 "    border-image:url(background.png)\n"
                                 "}\n"
                                 "")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.textEdit = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit.setGeometry(QtCore.QRect(180, 250, 681, 371))
        self.textEdit.setReadOnly(True)
        self.textEdit.setObjectName("textEdit")
        self.textEdit_2 = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit_2.setGeometry(QtCore.QRect(180, 180, 681, 41))
        self.textEdit_2.setObjectName("textEdit_2")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(90, 150, 81, 91))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(90, 230, 101, 61))
        self.label_2.setObjectName("label_2")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(910, 190, 91, 31))
        self.pushButton.setObjectName("pushButton")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1100, 22))
        self.menubar.setObjectName("menubar")
        self.menufile = QtWidgets.QMenu(self.menubar)
        self.menufile.setObjectName("menufile")
        self.menusetting = QtWidgets.QMenu(self.menubar)
        self.menusetting.setObjectName("menusetting")
        self.menu_2 = QtWidgets.QMenu(self.menusetting)
        self.menu_2.setObjectName("menu_2")
        MainWindow.setMenuBar(self.menubar)
        # self.actionmain_file = QtWidgets.QAction(MainWindow)
        # self.actionmain_file.setObjectName("actionmain_file")
        # self.action = QtWidgets.QAction(MainWindow)
        # self.action.setObjectName("action")
        self.action_2 = QtWidgets.QAction(MainWindow)
        self.action_2.setObjectName("action_2")
        self.actiondevice = QtWidgets.QAction(MainWindow)
        self.actiondevice.setObjectName("actiondevice")
        self.actionphisical = QtWidgets.QAction(MainWindow)
        self.actionphisical.setObjectName("actionphisical")
        self.actionvirtual = QtWidgets.QAction(MainWindow)
        self.actionvirtual.setObjectName("actionvirtual")
        self.actionprocess = QtWidgets.QAction(MainWindow)
        self.actionprocess.setObjectName("actionprocess")
        self.actionphisical_2 = QtWidgets.QAction(MainWindow)
        self.actionphisical_2.setObjectName("actionphisical_2")
        self.actionvirtual_2 = QtWidgets.QAction(MainWindow)
        self.actionvirtual_2.setObjectName("actionvirtual_2")
        # self.menufile.addAction(self.actionmain_file)
        # self.menufile.addSeparator()
        # self.menufile.addAction(self.action)
        # self.menufile.addSeparator()
        self.menufile.addAction(self.action_2)
        self.menu_2.addAction(self.actionphisical_2)
        self.menu_2.addSeparator()
        self.menu_2.addAction(self.actionvirtual_2)
        self.menusetting.addAction(self.menu_2.menuAction())
        self.menusetting.addSeparator()
        self.menusetting.addAction(self.actionprocess)
        self.menusetting.addSeparator()
        self.menusetting.addAction(self.actiondevice)
        self.menubar.addAction(self.menufile.menuAction())
        self.menubar.addAction(self.menusetting.menuAction())


        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "OS"))
        self.textEdit_2.setPlaceholderText(_translate("MainWindow", "输入指令"))
        self.label.setText(_translate("MainWindow", "指令输入："))
        self.label_2.setText(_translate("MainWindow", "信息输出："))
        self.pushButton.setText(_translate("MainWindow", ""))
        self.pushButton.setStyleSheet("QPushButton{border-image: url(send_btn.png)}")
        self.pushButton.setMaximumSize(60,30)
        self.pushButton.setMinimumSize(60,30)
        self.menufile.setTitle(_translate("MainWindow", "文件"))
        self.menusetting.setTitle(_translate("MainWindow", "监视"))
        self.menu_2.setTitle(_translate("MainWindow", "内存使用"))
        self.action_2.setText(_translate("MainWindow", "文件资源管理器"))
        self.actiondevice.setText(_translate("MainWindow", "设备管理"))
        self.actionphisical.setText(_translate("MainWindow", "物理内存使用"))
        self.actionvirtual.setText(_translate("MainWindow", "虚拟内存使用"))
        self.actionprocess.setText(_translate("MainWindow", "进程状态"))
        self.actionphisical_2.setText(_translate("MainWindow", "物理内存使用"))
        self.actionvirtual_2.setText(_translate("MainWindow", "虚拟内存使用"))


import prc_rc


class NewWindow(QMainWindow):
    def closeEvent(self, event):
        result = QtWidgets.QMessageBox.question(self, "Xpath Robot", "是否关闭所有线程",
                                                QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No)
        open_figs = plt.get_fignums()
        if result == QtWidgets.QMessageBox.Yes and len(open_figs) == 0:
            Event.set()
            event.accept()
        else:
            event.ignore()


class Mysignals(QObject):
    text_print = pyqtSignal(QTextEdit, str)
    get_path = pyqtSignal(str)
    filesignals = pyqtSignal(int, str, list)
    writeback = pyqtSignal(int, str)
    createSignals = pyqtSignal(str)


class MyWindow(Ui_MainWindow):
    def __init__(self, option):
        super().__init__()
        self.data = None
        self.kernel = kernel.Kernel(option)
        self.signals = Mysignals()
        self.window = NewWindow()
        self.setupUi(self.window)
        self.runThread = threading.Thread(target=self.run)
        self.init_connect()
        self.runThread.start()



    def run(self):
        while True:
            self.kernel.my_process_manager.run(self)
            if Event.is_set():
                break

    def text_print_Func(self, fb, text):  # 槽函数
        fb.append(text)

    def send_command_Func(self):
        command = self.textEdit_2.toPlainText()
        self.kernel.run(command, self)

    def init_connect(self):
        self.signals.text_print.connect(self.text_print_Func)
        self.pushButton.clicked.connect(self.send_command_Func)
        self.signals.get_path.connect(self.get_data)
        self.signals.filesignals.connect(self.kernel.my_memory_manager.read_file)
        self.signals.writeback.connect(self.kernel.my_memory_manager.out_file)
        self.action_2.triggered.connect(self.kernel.my_file_manager.file_visual)
        self.actiondevice.triggered.connect(self.kernel.my_process_manager.device_manager.generate_figures)
        self.actionprocess.triggered.connect(lambda: self.kernel.my_process_manager.snapshot(self))
        self.actionvirtual_2.triggered.connect(lambda: self.kernel.my_memory_manager.draw_memory(1))
        self.actionphisical_2.triggered.connect(lambda: self.kernel.my_memory_manager.draw_memory(2))

    def get_data(self, path):
        self.kernel.my_memory_manager.path = self.kernel.my_file_manager.path_to_file(path)


class InitWidget(Ui_Widget):

    def __init__(self):
        super().__init__()
        self.option = None
        self.window = QtWidgets.QWidget()
        self.setupUi(self.window)
        self.signals = Mysignals()
        self.windows = []
        self.init_connect()

    def init_connect(self):
        self.toolButton.clicked.connect(self.commit_data)
        self.signals.createSignals.connect(self.create_main)

    def commit_data(self):
        self.option = self.comboBox.currentText()
        size = int(self.comboBox_2.currentText())
        dict = \
            {
                "InputDevice": [
                    {
                        "id": 1,
                        "name": "keyboard 1",
                        "function": 1
                    },
                    {
                        "id": 2,
                        "name": "Keyboard 2",
                        "function": 1
                    },
                    {
                        "id": 3,
                        "name": "keyboard 3",
                        "function": 1
                    }
                ],
                "OutputDevice": []
            }
        for i in range(size):
            dict["OutputDevice"].append(
                {
                    "id": i + 1 + 3,
                    "name": "Printer " + str(i + 1),
                    "function": 2
                }
            )
        json_str = json.dumps(dict)
        with open("data/device_data.json", "w", encoding='utf-8') as f:
            f.write(json_str)
            f.close()
        self.window.close()
        self.signals.createSignals.emit(self.option)

    def create_main(self, option):
        myWindow = MyWindow(option)
        myWindow.window.show()


if __name__ == '__main__':
    app = QApplication(sys.argv)
    myinit = InitWidget()
    myinit.window.show()
    sys.exit(app.exec_())

